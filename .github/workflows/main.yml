name: Main_Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  LIBS: "pure/base/build/prod/libecs-pure-base.a,pure/cuda/build/prod/libecs-pure-cuda.a,pure/simd/build/prod/libecs-pure-simd.a,world/base/build/prod/libecs-world-base.a,world/plane/build/prod/libecs-world-plane.a,world/space/build/prod/libecs-world-space.a"

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run coding style checker
        run: |
            check.sh $(pwd) $(pwd)
            while IFS= read -r line; do
              file=$(echo "$line" | awk -F ':' '{print $1}')
              line_number=$(echo "$line" | awk -F ':' '{print $2}')
              severity=$(echo "$line" | awk -F ':' '{print $3}')
              message=$(echo "$line" | awk -F ':' '{print $4}')
              echo "::error file=$file,line=$line_number::$severity $message"
            done < coding-style-reports.log
            line_count=$(wc -l coding-style-reports.log | awk '{print $1}')
            if [ "$line_count" -gt 6 ]; then
              echo "::error::Too many style errors"
              exit 1
            fi

  compile_and_run_tests:
    needs: check_coding_style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync gcovr

      - name: Compile program
        run: make

      - name: Check libs
        run: |
            IFS=',' read -ra LIBS <<< "$LIBS"
            for lib in "${LIBS[@]}"; do
              if [ ! -f "$lib" ]; then
                echo "Missing library: $lib"
                exit 1
              fi
            done

      - name: Run program_tester
        run: |
            echo "## Binary Testing" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            make binary_tests_run >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Clean
        run: make fclean

      - name: Run tests and generate coverage reports
        run: |
            echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            make tests_run 2>> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "## Coverage" >> $GITHUB_STEP_SUMMARY
            echo "### Lines" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            gcovr --txt --exclude tests/ --exclude src/main.c >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "### Branches" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            gcovr --txt --exclude tests/ --exclude src/main.c --branches >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY****